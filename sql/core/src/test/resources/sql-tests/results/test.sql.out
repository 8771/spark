-- !query 30
CREATE OR REPLACE TEMPORARY VIEW test_agg AS SELECT * FROM VALUES
  (1, true), (1, false),
  (2, true),
  (3, false), (3, null),
  (4, null), (4, null),
  (5, null), (5, true), (5, false) AS test_agg(k, v)
-- !query 30 schema
struct<>
-- !query 30 output


-- !query 46
EXPLAIN EXTENDED SELECT k, every(v), some(v), any(v) FROM test_agg GROUP BY k
-- !query 46 schema
struct<plan:string>
-- !query 46 output
== Parsed Logical Plan ==
'Aggregate ['k], ['k, unresolvedalias('every('v), None), unresolvedalias('some('v), None), unresolvedalias('any('v), None)]
+- 'UnresolvedRelation `test_agg`

== Analyzed Logical Plan ==
k: int, every(v): boolean, some(v): boolean, any(v): boolean
Aggregate [k#x], [k#x, every(v#x) AS every(v)#x, some(v#x) AS some(v)#x, any(v#x) AS any(v)#x]
+- SubqueryAlias `test_agg`
   +- Project [k#x, v#x]
      +- SubqueryAlias `test_agg`
         +- LocalRelation [k#x, v#x]

== Optimized Logical Plan ==
Aggregate [k#x], [k#x, min(v#x) AS every(v)#x, max(v#x) AS some(v)#x, max(v#x) AS any(v)#x]
+- LocalRelation [k#x, v#x]

== Physical Plan ==
*HashAggregate(keys=[k#x], functions=[min(v#x), max(v#x)], output=[k#x, every(v)#x, some(v)#x, any(v)#x])
+- Exchange hashpartitioning(k#x, 200)
   +- *HashAggregate(keys=[k#x], functions=[partial_min(v#x), partial_max(v#x)], output=[k#x, min#x, max#x])
      +- LocalTableScan [k#x, v#x]
